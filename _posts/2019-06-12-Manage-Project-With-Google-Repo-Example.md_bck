---
layout:     post
title:      Manage Project with Google Repo —— Example
subtitle:   用Google Repo管理多仓库项目之范例
date:       2019-06-12
author:     Wingin Cheung
header-img: img/markdown-write.jpg
catalog: true
mermaid: true
tags:
    - repo
---

# 用Google Repo管理多仓库项目之范例

## 1、远程git服务器

我们假设有一个远程git服务器，用于存储git仓库：

- 服务器名：`gitserver`

- IP地址：`192.168.1.200`

- 账户：`git`

- 仓库列表：

    ```shell
    $ pwd
    /home/git/repository
    
    $ sh -c "cd /home/git/repository/; tree -d"
    .
    |-- manifests.git
    |-- repo0
    |   |-- test0.git
    |   |-- test1.git
    |   |-- test2.git
    |-- repo1
        |-- repo2
        |   |-- test3.git
        |   |-- test4.git
        |   |-- test5.git
        |-- test6.git
        |-- test7.git
        |-- test8.git
    ```
    
- 仓库tag信息：

    ```shell
    $ find /home/git/repository/ -name "*.git" | xargs -I {} sh -c "cd {}; echo {}\":\"; git tag"
    /home/git/repository/manifests.git:
    v1.0
    v1.1
    /home/git/repository/repo0/test0.git:
    v1.0
    v2.0
    /home/git/repository/repo0/test1.git:
    v0.1
    v0.2
    v1.0
    v1.1
    /home/git/repository/repo0/test2.git:
    v1.0
    /home/git/repository/repo1/repo2/test3.git:
    v1.0
    v1.1
    /home/git/repository/repo1/repo2/test4.git:
    v1.0
    /home/git/repository/repo1/repo2/test5.git:
    v1.0
    v1.1
    /home/git/repository/repo1/test6.git:
    v1.0
    v1.1
    /home/git/repository/repo1/test7.git:
    v1.0
    /home/git/repository/repo1/test8.git:
    v1.0
    ```
    
    

## 2、客户端

为了显示客户端子项目仓库的tag信息，我们准备一个名为ls_tag.sh的脚本用于显示指定目录下的git项目目录并打印相关tag信息：

```shell
#!/bin/sh

# file name: ls_tag.sh
# how to use: ls_tag.sh <path>

ls_tag(){
    for dir in `ls $1`; do
    if [ -d "$1/${dir}" ]; then

            if [ -d "$1/${dir}/.git" ]; then

                echo $1/$dir"'s tag:"
                cd $1/$dir
                git tag
                echo ""
            else

                ls_tag $1/$dir
                
            fi
            
        fi
        
    done
}

if [ "$1"x == ""x ]; then

    echo "Usage: " $0 " <path>"
    
else

    ls_tag $1
    
fi
```

我们假定我们有四台PC用于开发：

- 前三台负责独立的原始git仓库开发工作；
- 第四台用于集成所有git仓库，用于其它工作，例如编译所有文件；

具体情况为：

* 开发PC0：

    + 客户端名称：`workPC0`

    + IP地址：`192.168.1.101`

    + 用户名称：`workusr0`

    + 所存在仓库目录：

        ```shell
        $ pwd
        /home/workusr0/source_repo
        
        $ tree -d
        .
        |-- devices
        |   |-- test5
        |   |-- test7
        |-- test0
        |-- test4
        ```

    + 仓库tag信息：

        ```shell
        $ ls_tag.sh ~/source_repo
        /home/workusr0/source_repo/devices/test5's tag:
        v1.0
        v1.1
        
        /home/workusr0/source_repo/devices/test7's tag:
        v1.0
        v1.1
        v2.0
        
        /home/workusr0/source_repo/test0's tag:
        v1.0
        
        /home/workusr0/source_repo/test4's tag:
        v1.0
        v1.1
        ```

* 开发PC1：

    - 客户端名称：`workPC1`

    - IP地址：`192.168.1.102`

    - 用户名称：`workusr1`

    - 所存在仓库目录：

        ```shell
        $ pwd
        /home/workusr1/source_repo
        
        $ tree -d
        .
        |-- test2
        |-- test6
        ```

    - 仓库tag信息：

        ```shell
        $ ls_tag.sh ~/source_repo
        /home/workusr1/source_repo/test2's tag:
        v1.0
        
        /home/workusr1/source_repo/test6's tag:
        v1.0
        v1.1
        v1.2
        ```

* 开发PC2：

    - 客户端名称：`workPC2`

    - IP地址：`192.168.1.103`

    - 用户名称：`workusr2`

    - 所存在仓库目录：

        ```shell
        $ pwd
        /home/workusr2/source_repo
        
        $ tree -d
        .
        |-- test1
        |-- test3
        |-- platform
            |-- test8
        ```

    - 仓库tag信息：

        ```shell
        $ ls_tag.sh ~/source_repo
        /home/workusr1/source_repo/test1's tag:
        v1.0
        v1.1
        
        /home/workusr1/source_repo/test3's tag:
        v1.0
        v1.1
        v1.2
        
        /home/workusr1/source_repo/platform/test8's tag:
        v1.0
        ```

* 集成PC：

    - 客户端名称：`workPC3`

    - IP地址：`192.168.1.104`

    - 用户名称：`workusr3`

    - 所存在仓库目录：

        ```shell
        $ pwd
        /home/workusr2/tag_repo
        
        $ tree -d
        .
        |-- devices
        |   |-- t
        |-- test3
        |-- platform
            |-- test8
        ```

    - 仓库tag信息：

        ```shell
        $ ls_tag.sh ~/source_repo
        /home/workusr1/source_repo/test1's tag:
        v1.0
        v1.1
        
        /home/workusr1/source_repo/test3's tag:
        v1.0
        v1.1
        v1.2
        
        /home/workusr1/source_repo/platform/test8's tag:
        v1.0
        ```

## 2、准备工程仓库

我们远程登陆到git服务器上：

```shell
$ ssh 192.168.1.200 -l git
git@192.168.1.200's password:
```

输入账户密码后，我们将在Terminal中看到以下字样：

```shell
git@gitserver:~$
```

我们通过以下脚本创建所有工程的空仓库：

```shell
#!/bin/sh

mkdir -p ~/repository
cd ~/repository
git init --bare manifests.git

mkdir -p ~/repository/repo1
cd ~/repository/repo1
git init --bare test0.git
git init --bare test1.git
git init --bare test2.git

mkdir -p ~/repository/repo2
cd ~/repository/repo2
git init --bare test3.git
git init --bare test4.git
git init --bare test5.git

mkdir -p ~/repository/repo2/repo3/
cd ~/repository/repo2/repo3/
git init --bare test6.git
git init --bare test7.git
git init --bare test8.git
```

所有的空仓库创建完成后，